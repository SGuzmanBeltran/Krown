// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tournament.proto

package proto_tournament

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TournamentService_GetTournaments_FullMethodName = "/TournamentService/GetTournaments"
	TournamentService_GetTournament_FullMethodName  = "/TournamentService/GetTournament"
)

// TournamentServiceClient is the client API for TournamentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TournamentServiceClient interface {
	GetTournaments(ctx context.Context, in *GetTournamentsReq, opts ...grpc.CallOption) (*GetTournamentsRes, error)
	GetTournament(ctx context.Context, in *GetTournamentReq, opts ...grpc.CallOption) (*GetTournamentRes, error)
}

type tournamentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTournamentServiceClient(cc grpc.ClientConnInterface) TournamentServiceClient {
	return &tournamentServiceClient{cc}
}

func (c *tournamentServiceClient) GetTournaments(ctx context.Context, in *GetTournamentsReq, opts ...grpc.CallOption) (*GetTournamentsRes, error) {
	out := new(GetTournamentsRes)
	err := c.cc.Invoke(ctx, TournamentService_GetTournaments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetTournament(ctx context.Context, in *GetTournamentReq, opts ...grpc.CallOption) (*GetTournamentRes, error) {
	out := new(GetTournamentRes)
	err := c.cc.Invoke(ctx, TournamentService_GetTournament_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TournamentServiceServer is the server API for TournamentService service.
// All implementations must embed UnimplementedTournamentServiceServer
// for forward compatibility
type TournamentServiceServer interface {
	GetTournaments(context.Context, *GetTournamentsReq) (*GetTournamentsRes, error)
	GetTournament(context.Context, *GetTournamentReq) (*GetTournamentRes, error)
	mustEmbedUnimplementedTournamentServiceServer()
}

// UnimplementedTournamentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTournamentServiceServer struct {
}

func (UnimplementedTournamentServiceServer) GetTournaments(context.Context, *GetTournamentsReq) (*GetTournamentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournaments not implemented")
}
func (UnimplementedTournamentServiceServer) GetTournament(context.Context, *GetTournamentReq) (*GetTournamentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournament not implemented")
}
func (UnimplementedTournamentServiceServer) mustEmbedUnimplementedTournamentServiceServer() {}

// UnsafeTournamentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TournamentServiceServer will
// result in compilation errors.
type UnsafeTournamentServiceServer interface {
	mustEmbedUnimplementedTournamentServiceServer()
}

func RegisterTournamentServiceServer(s grpc.ServiceRegistrar, srv TournamentServiceServer) {
	s.RegisterService(&TournamentService_ServiceDesc, srv)
}

func _TournamentService_GetTournaments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournaments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetTournaments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournaments(ctx, req.(*GetTournamentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetTournament_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournament(ctx, req.(*GetTournamentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TournamentService_ServiceDesc is the grpc.ServiceDesc for TournamentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TournamentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TournamentService",
	HandlerType: (*TournamentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTournaments",
			Handler:    _TournamentService_GetTournaments_Handler,
		},
		{
			MethodName: "GetTournament",
			Handler:    _TournamentService_GetTournament_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tournament.proto",
}
